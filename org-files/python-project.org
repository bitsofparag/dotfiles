#+TITLE: Python project setup
#+OPTIONS: toc:nil

* About

This document describes setting up a base python project with django as the
framework of choice and other commonly used dependencies

* Pre-requirements
:PROPERTIES:
:header-args: :noweb-ref pre-requirements
:END:

*This section walks us through the installation of python and virtualenv*

1. Install python as follows (the binaries can be found [[https://www.python.org/downloads/release/python-361/][here]]):
    + To install on Linux/OSX
      #+BEGIN_SRC shell :results silent
      if [ "$(uname)" == "Darwin" ]; then
        brew install python3
      elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        PYTHON_SRC="Python-3.6.1"
        curl -O https://www.python.org/ftp/python/3.6.1/$PYTHON_SRC.tgz
        tar -xf $PYTHON_SRC.tgz && cd $PYTHON_SRC
        which python3 || ./install.sh
      fi
      #+END_SRC

    + Verify that the installation was successful:
      #+BEGIN_SRC shell
      python3 --version
      #+END_SRC
      #+RESULTS:
      : Python 3.6.1

    + (Optional) Alias /python3/ to /python/ by running the script below:
      #+BEGIN_SRC shell
      PYTHON_ALIAS="alias python=python3"
      if [ -f ~/.bashrc ]; then
        echo $PYTHON_ALIAS >> ~/.bashrc
      elif [ -f ~/.zshrc ]; then
        echo $PYTHON_ALIAS >> ~/.zshrc
      fi
      reset
      #+END_SRC
      #+RESULTS:

2. Set up virtual environment for python3
    + Install virtual environment wrapper
      #+BEGIN_SRC shell :results silent
      pip3 install virtualenv
      pip3 install virtualenvwrapper
      #+END_SRC

    + Create a folder that will contain all your virtual environments:
      #+BEGIN_SRC shell
      mkdir ~/.virtualenvs
      #+END_SRC
      If you are looking for python binaries and other installed dependencies,
      they will be found in this folder.

      #+RESULTS:
   
    + Add relevant environment variables to your shell profile:
      #+BEGIN_SRC shell
      add_env_vars="export WORKON_HOME=~/.virtualenvs \n
      export VIRTUALENVWRAPPER_PYTHON=$(which python3) \n
      export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv) \n
      source $(which virtualenvwrapper.sh)"
      
      if [ -f $HOME/.bashrc ]; then
        echo $add_env_vars >> $HOME/.bashrc
      elif [ -f $HOME/.zshrc ]; then
        echo $add_env_vars >> $HOME/.zshrc
      fi
      reset
      #+END_SRC
      #+RESULTS:

* Setup
:PROPERTIES:
:header-args: :noweb-ref setup
:END:

*This section walks us through setting up a new development virtual environment
 and starting a new python project within it*

1. Now that =python= and =virtualenv= are set up, one can start working on
   the project. First create a development environment using =mkvirtualenv=.
   What this essentially does is create a sandboxed environment within which one
   can install project-specific dependencies. Let's create a virtual environment
   for this project:
   #+BEGIN_SRC shell :results silent
   # First we source the virtualenv helper script
   source $(which virtualenvwrapper.sh)
   echo "Enter name for the new development virtual environment: "
   read PROJECT
   mkvirtualenv $PROJECT
   #+END_SRC

2. Then switch to this newly-created virtual environment like so:
   #+BEGIN_SRC shell
   echo "Switching to this new environment..."
   workon $PROJECT
   #+END_SRC

3. Install =django= within this new environment: 
   #+BEGIN_SRC shell
   pip install django
   #+END_SRC

4. Bootstrap a new django project like so:
   #+BEGIN_SRC shell
   echo "Enter absolute path to your workspace folder where the new project will lie: "
   read WORKSPACE
   cd $WORKSPACE
   django-admin startproject $PROJECT
   cd $PROJECT
   #+END_SRC
   This will create a new folder with the same name in your workspace. This
   folder contains project settings (configuration files, task runners etc). 
   
   One can manage the project via the =manage.py= file. To see a list of 
   available commands to run for the project:
   #+BEGIN_SRC shell
   python manage.py
   #+END_SRC

5. Finally, bootstrap a new app within this project where the application
   codebase (models, views, controllers, templates et al) will lie:
   #+BEGIN_SRC shell
   echo "Enter the name of the app for `$PROJECT`: "
   read APP
   python manage.py startapp $APP
   #+END_SRC

6. That's it! Your project is ready to start work on. 
    + One can see the files that were created:
      #+BEGIN_SRC shell
      echo "Project structure: "
      tree $PROJECT
      #+END_SRC
    
    + One can check the current list of project dependencies like so:
      #+BEGIN_SRC shell
      echo "Dependencies: "
      pip3 freeze
      #+END_SRC

* Run

*This section shows the different options to run a python project*

1. The project settings (configuration files, task runners etc) are kept in
    folder.

2. To launch the project, call the =runserver= task as follows:
   #+BEGIN_SRC shell
   python manage.py runserver
   #+END_SRC

* Tools

*This section discusses installation of project addons such as unit testing,
 code coverage, linting, collaborative tools etc*

1. Set up linting for python:
   #+BEGIN_SRC shell
   pip3 install pycodestyle
   #+END_SRC
   One can call the linter by running:
   #+BEGIN_SRC shell
   pycodestyle --first example.py
   #+END_SRC
   More documentation on this linter can be found [[https://pycodestyle.readthedocs.io/en/latest/][here]]

2. Set up a testing framework: 

* Appendix
  1. Generated script for installation of pre-requirements:
    #+BEGIN_SRC shell :tangle pre-requirements.sh :noweb yes :shebang #!/bin/sh
    <<pre-requirements>>
    #+END_SRC

  2. Generated script for setup of python project and development environment:
    #+BEGIN_SRC shell :tangle setup.sh :noweb yes :shebang #!/bin/sh
    <<setup>>
    #+END_SRC
