                         ━━━━━━━━━━━━━━━━━━━━━━
                          PYTHON PROJECT SETUP

                             Parag Majumdar
                         ━━━━━━━━━━━━━━━━━━━━━━





1 About
═══════

  This document describes setting up a base python project with django
  as the framework of choice and other commonly used dependencies


2 Pre-requirements
══════════════════

  *This section walks us through the installation of python and
   virtualenv*

  1. Install python as follows (the binaries can be found [here]):
     ⁃ To install on Linux/OSX
       ┌────
       │ if [ "$(uname)" == "Darwin" ]; then
       │   brew install python3
       │ elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
       │   PYTHON_SRC="Python-3.6.1"
       │   curl -O https://www.python.org/ftp/python/3.6.1/$PYTHON_SRC.tgz
       │   tar -xf $PYTHON_SRC.tgz && cd $PYTHON_SRC
       │   which python3 || ./install.sh
       │ fi
       └────

     ⁃ Verify that the installation was successful:
       ┌────
       │ python3 --version
       └────
     ⁃ (Optional) Alias /python3/ to /python/ by running the script
       below:
       ┌────
       │ PYTHON_ALIAS="alias python=python3"
       │ if [ -f ~/.bashrc ]; then
       │   echo $PYTHON_ALIAS >> ~/.bashrc
       │ elif [ -f ~/.zshrc ]; then
       │   echo $PYTHON_ALIAS >> ~/.zshrc
       │ fi
       │ reset
       └────
  2. Set up virtual environment for python3
     ⁃ Install virtual environment wrapper
       ┌────
       │ pip3 install virtualenv
       │ pip3 install virtualenvwrapper
       └────

     ⁃ Create a folder that will contain all your virtual environments:
       ┌────
       │ mkdir ~/.virtualenvs
       └────
       If you are looking for python binaries and other installed
       dependencies, they will be found in this folder.

     ⁃ Add relevant environment variables to your shell profile:
       ┌────
       │ add_env_vars="export WORKON_HOME=~/.virtualenvs \n
       │ export VIRTUALENVWRAPPER_PYTHON=$(which python3) \n
       │ export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv) \n
       │ source $(which virtualenvwrapper.sh)"
       │ 
       │ if [ -f $HOME/.bashrc ]; then
       │   echo $add_env_vars >> $HOME/.bashrc
       │ elif [ -f $HOME/.zshrc ]; then
       │   echo $add_env_vars >> $HOME/.zshrc
       │ fi
       │ reset
       └────


[here] https://www.python.org/downloads/release/python-361/


3 Setup
═══════

  *This section walks us through setting up a new development virtual
   environment and starting a new python project within it*

  1. Now that `python' and `virtualenv' are set up, one can start
     working on the project. First create a development environment
     using `mkvirtualenv'. What this essentially does is create a
     sandboxed environment within which one can install project-specific
     dependencies. Let's create a virtual environment for this project:
     ┌────
     │ # First we source the virtualenv helper script
     │ source $(which virtualenvwrapper.sh)
     │ echo "Enter name for the new development virtual environment: "
     │ read PROJECT
     │ mkvirtualenv $PROJECT
     └────

  2. Then switch to this newly-created virtual environment like so:
     ┌────
     │ echo "Switching to this new environment..."
     │ workon $PROJECT
     └────

  3. Install `django' within this new environment:
     ┌────
     │ pip install django
     └────

  4. Bootstrap a new django project like so:
     ┌────
     │ echo "Enter absolute path to your workspace folder where the new project will lie: "
     │ read WORKSPACE
     │ cd $WORKSPACE
     │ django-admin startproject $PROJECT
     │ cd $PROJECT
     └────
     This will create a new folder with the same name in your workspace.
     This folder contains project settings (configuration files, task
     runners etc).

     One can manage the project via the `manage.py' file. To see a list
     of available commands to run for the project:
     ┌────
     │ python manage.py
     └────

  5. Finally, bootstrap a new app within this project where the
     application codebase (models, views, controllers, templates et al)
     will lie:
     ┌────
     │ echo "Enter the name of the app for `$PROJECT`: "
     │ read APP
     │ python manage.py startapp $APP
     └────

  6. That's it! Your project is ready to start work on.
     ⁃ One can see the files that were created:
       ┌────
       │ echo "Project structure: "
       │ tree $PROJECT
       └────

     ⁃ One can check the current list of project dependencies like so:
       ┌────
       │ echo "Dependencies: "
       │ pip3 freeze
       └────


4 Run
═════

  *This section shows the different options to run a python project*

  1. The project settings (configuration files, task runners etc) are
     kept in folder.

  2. To launch the project, call the `runserver' task as follows:
     ┌────
     │ python manage.py runserver
     └────


5 Tools
═══════

  *This section discusses installation of project addons such as unit
   testing, code coverage, linting, collaborative tools etc*

  1. Set up linting for python:
     ┌────
     │ pip3 install pycodestyle
     └────
     One can call the linter by running:
     ┌────
     │ pycodestyle --first example.py
     └────
     More documentation on this linter can be found [here]

  2. Set up a testing framework:


[here] https://pycodestyle.readthedocs.io/en/latest/


6 Appendix
══════════

  1. Generated script for installation of pre-requirements:
     ┌────
     │ if [ "$(uname)" == "Darwin" ]; then
     │   brew install python3
     │ elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
     │   PYTHON_SRC="Python-3.6.1"
     │   curl -O https://www.python.org/ftp/python/3.6.1/$PYTHON_SRC.tgz
     │   tar -xf $PYTHON_SRC.tgz && cd $PYTHON_SRC
     │   which python3 || ./install.sh
     │ fi
     │ python3 --version
     │ PYTHON_ALIAS="alias python=python3"
     │ if [ -f ~/.bashrc ]; then
     │   echo $PYTHON_ALIAS >> ~/.bashrc
     │ elif [ -f ~/.zshrc ]; then
     │   echo $PYTHON_ALIAS >> ~/.zshrc
     │ fi
     │ reset
     │ pip3 install virtualenv
     │ pip3 install virtualenvwrapper
     │ mkdir ~/.virtualenvs
     │ add_env_vars="export WORKON_HOME=~/.virtualenvs \n
     │ export VIRTUALENVWRAPPER_PYTHON=$(which python3) \n
     │ export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv) \n
     │ source $(which virtualenvwrapper.sh)"
     │ 
     │ if [ -f $HOME/.bashrc ]; then
     │   echo $add_env_vars >> $HOME/.bashrc
     │ elif [ -f $HOME/.zshrc ]; then
     │   echo $add_env_vars >> $HOME/.zshrc
     │ fi
     │ reset
     └────

  2. Generated script for setup of python project and development
     environment:
     ┌────
     │ # First we source the virtualenv helper script
     │ source $(which virtualenvwrapper.sh)
     │ echo "Enter name for the new development virtual environment: "
     │ read PROJECT
     │ mkvirtualenv $PROJECT
     │ echo "Switching to this new environment..."
     │ workon $PROJECT
     │ pip install django
     │ echo "Enter absolute path to your workspace folder where the new project will lie: "
     │ read WORKSPACE
     │ cd $WORKSPACE
     │ django-admin startproject $PROJECT
     │ cd $PROJECT
     │ python manage.py
     │ echo "Enter the name of the app for `$PROJECT`: "
     │ read APP
     │ python manage.py startapp $APP
     │ echo "Project structure: "
     │ tree $PROJECT
     │ echo "Dependencies: "
     │ pip3 freeze
     └────
